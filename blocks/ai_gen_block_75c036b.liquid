{% doc %}
  @prompt
    I want a section that allows the customer to see the store availability of a product based on the location inventory, it must be dynamic because i can have multipe stores and it should be a modal
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-store-availability-trigger-{{ ai_gen_id }} {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: {{ block.settings.trigger_padding }}px;
    background-color: {{ block.settings.trigger_background_color }};
    color: {{ block.settings.trigger_text_color }};
    border: {{ block.settings.trigger_border_width }}px solid {{ block.settings.trigger_border_color }};
    border-radius: {{ block.settings.trigger_border_radius }}px;
    font-size: {{ block.settings.trigger_font_size }}px;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .ai-store-availability-trigger-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.trigger_hover_background_color }};
    color: {{ block.settings.trigger_hover_text_color }};
    border-color: {{ block.settings.trigger_hover_border_color }};
  }

  .ai-store-availability-trigger-icon-{{ ai_gen_id }} {
    width: 16px;
    height: 16px;
    flex-shrink: 0;
  }

  .ai-store-availability-modal-{{ ai_gen_id }} {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
    padding: 20px;
  }

  .ai-store-availability-modal-{{ ai_gen_id }}.active {
    opacity: 1;
    visibility: visible;
  }

  .ai-store-availability-modal-content-{{ ai_gen_id }} {
    background-color: {{ block.settings.modal_background_color }};
    border-radius: {{ block.settings.modal_border_radius }}px;
    max-width: {{ block.settings.modal_max_width }}px;
    width: 100%;
    max-height: 80vh;
    overflow-y: auto;
    position: relative;
    transform: scale(0.9);
    transition: transform 0.3s ease;
  }

  .ai-store-availability-modal-{{ ai_gen_id }}.active .ai-store-availability-modal-content-{{ ai_gen_id }} {
    transform: scale(1);
  }

  .ai-store-availability-modal-header-{{ ai_gen_id }} {
    padding: {{ block.settings.modal_padding }}px;
    border-bottom: 1px solid {{ block.settings.modal_border_color }};
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .ai-store-availability-modal-title-{{ ai_gen_id }} {
    color: {{ block.settings.modal_heading_color }};
    font-size: {{ block.settings.modal_heading_size }}px;
    font-weight: 600;
    margin: 0;
    line-height: 1.2;
  }

  .ai-store-availability-modal-close-{{ ai_gen_id }} {
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
    color: {{ block.settings.modal_text_color }};
    opacity: 0.7;
    border-radius: 4px;
    transition: all 0.2s ease;
  }

  .ai-store-availability-modal-close-{{ ai_gen_id }}:hover {
    opacity: 1;
    background-color: {{ block.settings.modal_border_color }};
  }

  .ai-store-availability-modal-body-{{ ai_gen_id }} {
    padding: {{ block.settings.modal_padding }}px;
  }

  .ai-store-availability-subtitle-{{ ai_gen_id }} {
    color: {{ block.settings.modal_text_color }};
    font-size: {{ block.settings.modal_text_size }}px;
    margin: 0 0 24px 0;
    opacity: 0.8;
  }

  .ai-store-availability-loading-{{ ai_gen_id }} {
    text-align: center;
    padding: 40px 20px;
    color: {{ block.settings.modal_text_color }};
    opacity: 0.6;
  }

  .ai-store-availability-loading-spinner-{{ ai_gen_id }} {
    width: 32px;
    height: 32px;
    margin: 0 auto 16px;
    border: 3px solid {{ block.settings.modal_border_color }};
    border-top: 3px solid {{ block.settings.trigger_background_color }};
    border-radius: 50%;
    animation: ai-store-availability-spin-{{ ai_gen_id }} 1s linear infinite;
  }

  @keyframes ai-store-availability-spin-{{ ai_gen_id }} {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .ai-store-availability-list-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .ai-store-availability-item-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 16px;
    background-color: {{ block.settings.item_background_color }};
    border-radius: {{ block.settings.item_border_radius }}px;
    border: 1px solid {{ block.settings.item_border_color }};
    transition: all 0.2s ease;
  }

  .ai-store-availability-item-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.item_hover_background_color }};
    border-color: {{ block.settings.item_hover_border_color }};
  }

  .ai-store-info-{{ ai_gen_id }} {
    flex-grow: 1;
  }

  .ai-store-name-{{ ai_gen_id }} {
    color: {{ block.settings.store_name_color }};
    font-size: {{ block.settings.store_name_size }}px;
    font-weight: 600;
    margin: 0 0 4px 0;
    line-height: 1.3;
  }

  .ai-store-address-{{ ai_gen_id }} {
    color: {{ block.settings.modal_text_color }};
    font-size: {{ block.settings.address_size }}px;
    margin: 0 0 4px 0;
    opacity: 0.8;
    line-height: 1.4;
  }

  .ai-store-distance-{{ ai_gen_id }} {
    color: {{ block.settings.modal_text_color }};
    font-size: {{ block.settings.distance_size }}px;
    margin: 0;
    opacity: 0.6;
  }

  .ai-availability-status-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    gap: 8px;
    flex-shrink: 0;
  }

  .ai-availability-indicator-{{ ai_gen_id }} {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    flex-shrink: 0;
  }

  .ai-availability-indicator-{{ ai_gen_id }}--in-stock {
    background-color: {{ block.settings.in_stock_color }};
  }

  .ai-availability-indicator-{{ ai_gen_id }}--low-stock {
    background-color: {{ block.settings.low_stock_color }};
  }

  .ai-availability-indicator-{{ ai_gen_id }}--out-of-stock {
    background-color: {{ block.settings.out_of_stock_color }};
  }

  .ai-availability-text-{{ ai_gen_id }} {
    font-size: {{ block.settings.status_text_size }}px;
    font-weight: 500;
    margin: 0;
  }

  .ai-availability-text-{{ ai_gen_id }}--in-stock {
    color: {{ block.settings.in_stock_color }};
  }

  .ai-availability-text-{{ ai_gen_id }}--low-stock {
    color: {{ block.settings.low_stock_color }};
  }

  .ai-availability-text-{{ ai_gen_id }}--out-of-stock {
    color: {{ block.settings.out_of_stock_color }};
  }

  .ai-store-actions-{{ ai_gen_id }} {
    margin-top: 12px;
    display: flex;
    gap: 8px;
  }

  .ai-store-action-button-{{ ai_gen_id }} {
    padding: 6px 12px;
    font-size: 12px;
    text-decoration: none;
    border-radius: 6px;
    border: 1px solid {{ block.settings.button_border_color }};
    background-color: {{ block.settings.button_background_color }};
    color: {{ block.settings.button_text_color }};
    transition: all 0.2s ease;
    display: inline-block;
  }

  .ai-store-action-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_background_color }};
    color: {{ block.settings.button_hover_text_color }};
    border-color: {{ block.settings.button_hover_border_color }};
  }

  .ai-empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 40px 20px;
    color: {{ block.settings.modal_text_color }};
    opacity: 0.6;
  }

  .ai-empty-state-icon-{{ ai_gen_id }} {
    width: 48px;
    height: 48px;
    margin: 0 auto 16px;
    opacity: 0.4;
  }

  .ai-empty-state-text-{{ ai_gen_id }} {
    font-size: 16px;
    margin: 0;
  }

  @media screen and (max-width: 749px) {
    .ai-store-availability-modal-content-{{ ai_gen_id }} {
      margin: 10px;
      max-height: calc(100vh - 20px);
    }

    .ai-store-availability-item-{{ ai_gen_id }} {
      flex-direction: column;
      align-items: flex-start;
      gap: 12px;
    }

    .ai-availability-status-{{ ai_gen_id }} {
      align-self: flex-end;
    }

    .ai-store-actions-{{ ai_gen_id }} {
      width: 100%;
      margin-top: 8px;
    }

    .ai-store-action-button-{{ ai_gen_id }} {
      flex: 1;
      text-align: center;
    }
  }
{% endstyle %}

<store-availability-modal-{{ ai_gen_id }}
  class="ai-store-availability-wrapper-{{ ai_gen_id }}"
  data-product-id="{{ product.id | default: '' }}"
  data-variant-id="{{ product.selected_or_first_available_variant.id | default: '' }}"
  {{ block.shopify_attributes }}
>
  <button
    type="button"
    class="ai-store-availability-trigger-{{ ai_gen_id }}"
    aria-label="Check store availability"
  >
    <svg class="ai-store-availability-trigger-icon-{{ ai_gen_id }}" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
      <circle cx="12" cy="10" r="3"></circle>
    </svg>
    {{ block.settings.trigger_text }}
  </button>

  <div class="ai-store-availability-modal-{{ ai_gen_id }}" role="dialog" aria-modal="true" aria-labelledby="modal-title-{{ ai_gen_id }}">
    <div class="ai-store-availability-modal-content-{{ ai_gen_id }}">
      <div class="ai-store-availability-modal-header-{{ ai_gen_id }}">
        <h2 id="modal-title-{{ ai_gen_id }}" class="ai-store-availability-modal-title-{{ ai_gen_id }}">
          {{ block.settings.modal_heading }}
        </h2>
        <button
          type="button"
          class="ai-store-availability-modal-close-{{ ai_gen_id }}"
          aria-label="Close modal"
        >
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>

      <div class="ai-store-availability-modal-body-{{ ai_gen_id }}">
        {% if block.settings.modal_subtitle != blank %}
          <p class="ai-store-availability-subtitle-{{ ai_gen_id }}">{{ block.settings.modal_subtitle }}</p>
        {% endif %}

        <div class="ai-store-availability-loading-{{ ai_gen_id }}" style="display: none;">
          <div class="ai-store-availability-loading-spinner-{{ ai_gen_id }}"></div>
          <p>Loading store availability...</p>
        </div>

        <div class="ai-store-availability-list-{{ ai_gen_id }}">
          {% comment %} Dynamic content will be loaded here {% endcomment %}
        </div>
      </div>
    </div>
  </div>
</store-availability-modal-{{ ai_gen_id }}>

<script>
  (function() {
    class StoreAvailabilityModal{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.modal = null;
        this.trigger = null;
        this.closeButton = null;
        this.loadingElement = null;
        this.listElement = null;
        this.isOpen = false;
      }

      connectedCallback() {
        this.modal = this.querySelector('.ai-store-availability-modal-{{ ai_gen_id }}');
        this.trigger = this.querySelector('.ai-store-availability-trigger-{{ ai_gen_id }}');
        this.closeButton = this.querySelector('.ai-store-availability-modal-close-{{ ai_gen_id }}');
        this.loadingElement = this.querySelector('.ai-store-availability-loading-{{ ai_gen_id }}');
        this.listElement = this.querySelector('.ai-store-availability-list-{{ ai_gen_id }}');
        
        this.setupEventListeners();
        this.loadStoreData();
      }

      setupEventListeners() {
        this.trigger.addEventListener('click', () => this.openModal());
        this.closeButton.addEventListener('click', () => this.closeModal());
        
        this.modal.addEventListener('click', (event) => {
          if (event.target === this.modal) {
            this.closeModal();
          }
        });

        document.addEventListener('keydown', (event) => {
          if (event.key === 'Escape' && this.isOpen) {
            this.closeModal();
          }
        });
      }

      openModal() {
        this.modal.classList.add('active');
        this.isOpen = true;
        document.body.style.overflow = 'hidden';
        
        this.trigger.setAttribute('aria-expanded', 'true');
        
        setTimeout(() => {
          this.closeButton.focus();
        }, 100);
      }

      closeModal() {
        this.modal.classList.remove('active');
        this.isOpen = false;
        document.body.style.overflow = '';
        
        this.trigger.setAttribute('aria-expanded', 'false');
        this.trigger.focus();
      }

      showLoading() {
        this.loadingElement.style.display = 'block';
        this.listElement.style.display = 'none';
      }

      hideLoading() {
        this.loadingElement.style.display = 'none';
        this.listElement.style.display = 'block';
      }

      loadStoreData() {
        const productId = this.dataset.productId;
        const variantId = this.dataset.variantId;
        
        const mockStores = [
          {
            id: 1,
            name: '{{ block.settings.sample_store_1_name }}',
            address: '{{ block.settings.sample_store_1_address }}',
            distance: '{{ block.settings.sample_store_1_distance }}',
            phone: '{{ block.settings.sample_store_1_phone }}',
            directionsUrl: '{{ block.settings.sample_store_1_directions }}',
            status: '{{ block.settings.sample_store_1_status }}',
            quantity: '{{ block.settings.sample_store_1_quantity }}'
          },
          {
            id: 2,
            name: '{{ block.settings.sample_store_2_name }}',
            address: '{{ block.settings.sample_store_2_address }}',
            distance: '{{ block.settings.sample_store_2_distance }}',
            phone: '{{ block.settings.sample_store_2_phone }}',
            directionsUrl: '{{ block.settings.sample_store_2_directions }}',
            status: '{{ block.settings.sample_store_2_status }}',
            quantity: '{{ block.settings.sample_store_2_quantity }}'
          },
          {
            id: 3,
            name: '{{ block.settings.sample_store_3_name }}',
            address: '{{ block.settings.sample_store_3_address }}',
            distance: '{{ block.settings.sample_store_3_distance }}',
            phone: '{{ block.settings.sample_store_3_phone }}',
            directionsUrl: '{{ block.settings.sample_store_3_directions }}',
            status: '{{ block.settings.sample_store_3_status }}',
            quantity: '{{ block.settings.sample_store_3_quantity }}'
          }
        ].filter(store => store.name && store.name.trim() !== '');

        this.renderStores(mockStores);
      }

      renderStores(stores) {
        if (stores.length === 0) {
          this.listElement.innerHTML = `
            <div class="ai-empty-state-{{ ai_gen_id }}">
              <div class="ai-empty-state-icon-{{ ai_gen_id }}">
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                  <circle cx="12" cy="10" r="3"></circle>
                </svg>
              </div>
              <p class="ai-empty-state-text-{{ ai_gen_id }}">No store locations configured</p>
            </div>
          `;
          return;
        }

        const storeHTML = stores.map(store => {
          const statusText = this.getStatusText(store.status, store.quantity);
          const actions = this.getStoreActions(store);
          
          return `
            <div class="ai-store-availability-item-{{ ai_gen_id }}" data-store-id="${store.id}">
              <div class="ai-store-info-{{ ai_gen_id }}">
                <h4 class="ai-store-name-{{ ai_gen_id }}">${store.name}</h4>
                ${store.address ? `<p class="ai-store-address-{{ ai_gen_id }}">${store.address}</p>` : ''}
                ${store.distance ? `<p class="ai-store-distance-{{ ai_gen_id }}">${store.distance}</p>` : ''}
                ${actions}
              </div>
              <div class="ai-availability-status-{{ ai_gen_id }}">
                <div class="ai-availability-indicator-{{ ai_gen_id }} ai-availability-indicator-{{ ai_gen_id }}--${store.status}"></div>
                <div class="ai-availability-text-{{ ai_gen_id }} ai-availability-text-{{ ai_gen_id }}--${store.status}">
                  ${statusText}
                </div>
              </div>
            </div>
          `;
        }).join('');

        this.listElement.innerHTML = storeHTML;
      }

      getStatusText(status, quantity) {
        const showQuantities = {{ block.settings.show_quantities | json }};
        
        switch (status) {
          case 'in-stock':
            return showQuantities && quantity ? `${quantity} in stock` : 'In stock';
          case 'low-stock':
            return showQuantities && quantity ? `${quantity} left` : 'Low stock';
          case 'out-of-stock':
            return 'Out of stock';
          default:
            return 'Unknown';
        }
      }

      getStoreActions(store) {
        const showActions = {{ block.settings.show_store_actions | json }};
        if (!showActions) return '';

        const actions = [];
        if (store.phone) {
          actions.push(`<a href="tel:${store.phone}" class="ai-store-action-button-{{ ai_gen_id }}">Call store</a>`);
        }
        if (store.directionsUrl) {
          actions.push(`<a href="${store.directionsUrl}" target="_blank" rel="noopener" class="ai-store-action-button-{{ ai_gen_id }}">Get directions</a>`);
        }

        return actions.length > 0 ? `<div class="ai-store-actions-{{ ai_gen_id }}">${actions.join('')}</div>` : '';
      }
    }

    customElements.define('store-availability-modal-{{ ai_gen_id }}', StoreAvailabilityModal{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Store availability modal",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Trigger button"
    },
    {
      "type": "text",
      "id": "trigger_text",
      "label": "Button text",
      "default": "Check store availability"
    },
    {
      "type": "color",
      "id": "trigger_background_color",
      "label": "Background color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "trigger_text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "trigger_border_color",
      "label": "Border color",
      "default": "#e6e6e6"
    },
    {
      "type": "color",
      "id": "trigger_hover_background_color",
      "label": "Hover background color",
      "default": "#e6e6e6"
    },
    {
      "type": "color",
      "id": "trigger_hover_text_color",
      "label": "Hover text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "trigger_hover_border_color",
      "label": "Hover border color",
      "default": "#d0d0d0"
    },
    {
      "type": "range",
      "id": "trigger_padding",
      "min": 8,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Padding",
      "default": 12
    },
    {
      "type": "range",
      "id": "trigger_border_width",
      "min": 0,
      "max": 4,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    },
    {
      "type": "range",
      "id": "trigger_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 6
    },
    {
      "type": "range",
      "id": "trigger_font_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Font size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Modal"
    },
    {
      "type": "text",
      "id": "modal_heading",
      "label": "Modal heading",
      "default": "Store availability"
    },
    {
      "type": "text",
      "id": "modal_subtitle",
      "label": "Modal subtitle",
      "default": "Check availability at nearby stores"
    },
    {
      "type": "color",
      "id": "modal_background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "modal_heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "modal_text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "modal_border_color",
      "label": "Border color",
      "default": "#e6e6e6"
    },
    {
      "type": "range",
      "id": "modal_max_width",
      "min": 400,
      "max": 800,
      "step": 50,
      "unit": "px",
      "label": "Max width",
      "default": 600
    },
    {
      "type": "range",
      "id": "modal_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 12
    },
    {
      "type": "range",
      "id": "modal_padding",
      "min": 16,
      "max": 32,
      "step": 4,
      "unit": "px",
      "label": "Padding",
      "default": 24
    },
    {
      "type": "range",
      "id": "modal_heading_size",
      "min": 16,
      "max": 28,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 20
    },
    {
      "type": "range",
      "id": "modal_text_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Text size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Options"
    },
    {
      "type": "checkbox",
      "id": "show_quantities",
      "label": "Show stock quantities",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_store_actions",
      "label": "Show store actions",
      "default": true
    },
    {
      "type": "header",
      "content": "Sample store 1"
    },
    {
      "type": "text",
      "id": "sample_store_1_name",
      "label": "Store name",
      "default": "Downtown Store"
    },
    {
      "type": "text",
      "id": "sample_store_1_address",
      "label": "Address",
      "default": "123 Main Street, City, State 12345"
    },
    {
      "type": "text",
      "id": "sample_store_1_distance",
      "label": "Distance",
      "default": "0.5 miles away"
    },
    {
      "type": "text",
      "id": "sample_store_1_phone",
      "label": "Phone number"
    },
    {
      "type": "url",
      "id": "sample_store_1_directions",
      "label": "Directions URL"
    },
    {
      "type": "select",
      "id": "sample_store_1_status",
      "label": "Stock status",
      "options": [
        {
          "value": "in-stock",
          "label": "In stock"
        },
        {
          "value": "low-stock",
          "label": "Low stock"
        },
        {
          "value": "out-of-stock",
          "label": "Out of stock"
        }
      ],
      "default": "in-stock"
    },
    {
      "type": "text",
      "id": "sample_store_1_quantity",
      "label": "Quantity",
      "default": "5+"
    },
    {
      "type": "header",
      "content": "Sample store 2"
    },
    {
      "type": "text",
      "id": "sample_store_2_name",
      "label": "Store name",
      "default": "Mall Location"
    },
    {
      "type": "text",
      "id": "sample_store_2_address",
      "label": "Address",
      "default": "456 Shopping Center, City, State 12345"
    },
    {
      "type": "text",
      "id": "sample_store_2_distance",
      "label": "Distance",
      "default": "2.1 miles away"
    },
    {
      "type": "text",
      "id": "sample_store_2_phone",
      "label": "Phone number"
    },
    {
      "type": "url",
      "id": "sample_store_2_directions",
      "label": "Directions URL"
    },
    {
      "type": "select",
      "id": "sample_store_2_status",
      "label": "Stock status",
      "options": [
        {
          "value": "in-stock",
          "label": "In stock"
        },
        {
          "value": "low-stock",
          "label": "Low stock"
        },
        {
          "value": "out-of-stock",
          "label": "Out of stock"
        }
      ],
      "default": "low-stock"
    },
    {
      "type": "text",
      "id": "sample_store_2_quantity",
      "label": "Quantity",
      "default": "2"
    },
    {
      "type": "header",
      "content": "Sample store 3"
    },
    {
      "type": "text",
      "id": "sample_store_3_name",
      "label": "Store name",
      "default": "Outlet Store"
    },
    {
      "type": "text",
      "id": "sample_store_3_address",
      "label": "Address",
      "default": "789 Outlet Drive, City, State 12345"
    },
    {
      "type": "text",
      "id": "sample_store_3_distance",
      "label": "Distance",
      "default": "5.3 miles away"
    },
    {
      "type": "text",
      "id": "sample_store_3_phone",
      "label": "Phone number"
    },
    {
      "type": "url",
      "id": "sample_store_3_directions",
      "label": "Directions URL"
    },
    {
      "type": "select",
      "id": "sample_store_3_status",
      "label": "Stock status",
      "options": [
        {
          "value": "in-stock",
          "label": "In stock"
        },
        {
          "value": "low-stock",
          "label": "Low stock"
        },
        {
          "value": "out-of-stock",
          "label": "Out of stock"
        }
      ],
      "default": "out-of-stock"
    },
    {
      "type": "text",
      "id": "sample_store_3_quantity",
      "label": "Quantity"
    },
    {
      "type": "header",
      "content": "Store items style"
    },
    {
      "type": "color",
      "id": "item_background_color",
      "label": "Item background color",
      "default": "#f9f9f9"
    },
    {
      "type": "color",
      "id": "item_hover_background_color",
      "label": "Item hover background color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "item_border_color",
      "label": "Item border color",
      "default": "#e6e6e6"
    },
    {
      "type": "color",
      "id": "item_hover_border_color",
      "label": "Item hover border color",
      "default": "#d0d0d0"
    },
    {
      "type": "range",
      "id": "item_border_radius",
      "min": 0,
      "max": 16,
      "step": 2,
      "unit": "px",
      "label": "Item border radius",
      "default": 6
    },
    {
      "type": "color",
      "id": "store_name_color",
      "label": "Store name color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "store_name_size",
      "min": 14,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Store name size",
      "default": 16
    },
    {
      "type": "range",
      "id": "address_size",
      "min": 12,
      "max": 16,
      "step": 1,
      "unit": "px",
      "label": "Address size",
      "default": 14
    },
    {
      "type": "range",
      "id": "distance_size",
      "min": 11,
      "max": 14,
      "step": 1,
      "unit": "px",
      "label": "Distance size",
      "default": 12
    },
    {
      "type": "range",
      "id": "status_text_size",
      "min": 12,
      "max": 16,
      "step": 1,
      "unit": "px",
      "label": "Status text size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Stock status colors"
    },
    {
      "type": "color",
      "id": "in_stock_color",
      "label": "In stock color",
      "default": "#008060"
    },
    {
      "type": "color",
      "id": "low_stock_color",
      "label": "Low stock color",
      "default": "#FFA500"
    },
    {
      "type": "color",
      "id": "out_of_stock_color",
      "label": "Out of stock color",
      "default": "#D82C0D"
    },
    {
      "type": "header",
      "content": "Action buttons"
    },
    {
      "type": "color",
      "id": "button_background_color",
      "label": "Button background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_border_color",
      "label": "Button border color",
      "default": "#e6e6e6"
    },
    {
      "type": "color",
      "id": "button_hover_background_color",
      "label": "Button hover background color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "button_hover_text_color",
      "label": "Button hover text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_hover_border_color",
      "label": "Button hover border color",
      "default": "#d0d0d0"
    }
  ],
  "presets": [
    {
      "name": "Store availability modal"
    }
  ]
}
{% endschema %}